
- allow = @context ? policy(@context) : policy(:dashboard)
- content_for :title, [translate_model(@model, :plural), @context&.label].compact.join(' | ')

= render 'cms/views/context' do
  h3.ui.dividing.header
    - if policy(@model).new?
      - create_action_text = translate('cms.actions.target.new', resource: translate_model(@model))
      - allow_new = allow.new_association?(@model.table_name.to_sym, @query)

      - if allow_new == nil
        - tooltip = { tooltip: translate(@model.model_name.i18n_key, scope: 'cms.messages.cannot_create'), position: 'bottom right', variation: 'small basic' }
        = floating_action create_action_text, 'plus', nil, disabled: true, data: tooltip
      - elsif allow_new
        = floating_action create_action_text, 'plus', url_for([:new, :cms, @context, @model_name.singular_route_key.to_sym, online: @query[:online].present?])

    - if @model == Audit && @context.present?
      - last_activity_on = @context.try(:last_activity_on) || @context.updated_at.to_date
      = floating_action last_activity_on.to_s(:long), class: 'active teal', data: { tooltip: translate_attribute(@context, :last_activity_on) }

    .content
      - if controller_name == 'managers' && @context.try(:parent_managers)&.present?
        = translate('cms.details.managers_for_record', resource: @context.label)
      - else
        = translate_model(@model, :plural)

    - if @model == Event && !@context.is_a?(Venue)
      .ui.secondary.menu
        a.item class=('active' unless @query[:online]) href="?online=false"
          = translate('cms.menu.events.offline')
        a.item class=('active' if @query[:online]) href="?online=true"
          = translate('cms.menu.events.online')

  - if @records.present? || params[:q]
    = simple_form_for url_for([:cms, @model]), html: { method: 'GET', data: { remote: 'true' }, autocomplete: 'off' }
      - if @query[:online].present?
        input name='online' type='hidden' value=@query[:online].to_s

      .search.ui.fluid.icon.small.input data-search=@model_name.route_key
        - search_placeholder = translate('cms.actions.target.search', resources: translate_model(@model, :plural).downcase)
        input name='q' type='text' placeholder=search_placeholder value=(params[:q] || '')
        i.search.icon

  - if @model == Audit
    .ui.fluid.styled.records.accordion data-search=@model_name.route_key
      = render partial: "cms/list_items/#{@model_name.singular_route_key}", collection: @records, cached: true
  - elsif @model == Registration
    .ui.fluid.records.accordion data-search=@model_name.route_key
      = render partial: "cms/list_items/#{@model_name.singular_route_key}", collection: @records, cached: true
  - else
    .ui.relaxed.records.list data-search=@model_name.route_key
      = render partial: "cms/list_items/#{@records.model_name.singular_route_key}", collection: @records, cached: true, locals: { removable: true }

  .pagination-info data-search=@model_name.route_key = page_entries_info @records
  .pagination data-search=@model_name.route_key = paginate @records

  - if controller_name == 'managers' && @context.try(:parent_managers)&.present?
    h3.ui.dividing.header = translate('cms.details.managers_for_record', resource: @context.parent.label)

    .ui.relaxed.list
      = render partial: 'cms/list_items/manager', collection: @context.parent_managers, cached: true

- if @model == Audit
  .ui.basic.segment
    dl
      - %i[last_activity_on status_email_sent_at reminder_email_sent_at summary_email_sent_at should_update_status_at verified_at expired_at archived_at finished_at].each do |timestamp|
        - if @context.respond_to?(timestamp)
          - time = @context.send(timestamp)
          dt
            strong = translate_attribute(@context, timestamp)
          dd
            - if time
              - unless timestamp.to_s.ends_with?('_on')
                = timestamp == :should_update_status_at ? time_from_now_in_words(time) : time_ago_in_words(time)
                '  - 
              = time.to_s(:long)
            - else
              | -
      - if @context.respond_to?(:status)
        dt
          strong = translate_attribute(@context.class, :status)
        dd
          = translate_enum_value(@context, :status)
