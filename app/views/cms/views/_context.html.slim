
- allow = @context ? policy(@context) : policy(:worldwide)

h2.ui.header
  - unless %w[edit new].include?(action_name)
    - if allow.destroy?
      = floating_action translate('cms.actions.simple.destroy'), 'trash', url_for([:cms, @context]), data: { method: 'DELETE', confirm: translate('cms.messages.confirm_destroy') }
    - if allow.edit?
      = floating_action translate('cms.actions.simple.edit'), 'edit', url_for([:edit, :cms, @context])
    - if @context.try(:publicly_visible?)
      = floating_action translate('cms.actions.simple.view'), 'marker', url_for([:map, @context, layer: @context.layer]), target: '_blank'
    - if @context.respond_to?(:published) && !@context.published
      - text = translate('cms.details.record_not_published.title', resource: translate_model(@context.class))
      - tooltip = translate('cms.details.record_not_published.description', resource: translate_model(@context.class).downcase)
      = floating_action text, 'exclamation', class: 'active yellow', data: { tooltip: tooltip, position: 'bottom center' }
    - elsif @context.try(:finished?)
      / Do nothing
    - elsif @context.try(:archived?)
      - text = translate('cms.details.record_archived.title', resource: translate_model(@context.class))
      - tooltip = translate('cms.details.record_archived.description', resource: translate_model(@context.class).downcase, time: time_ago_in_words(@context.updated_at))
      = floating_action text, 'exclamation', class: 'active orange', data: { tooltip: tooltip, position: 'bottom center' }
    - elsif @context.try(:expired?)
      - text = translate('cms.details.record_expired.title', resource: translate_model(@context.class))
      - tooltip = translate('cms.details.record_expired.description', resource: translate_model(@context.class).downcase, updated_ago: time_ago_in_words(@context.updated_at))
      = floating_action text, 'exclamation', class: 'active orange', data: { tooltip: tooltip, position: 'bottom center' }
    - elsif @context.try(:verified?)
      = floating_action translate('cms.hints.verified'), 'check', class: 'active green'
  .content = @context&.label || translate('cms.menu.worldwide')
  - if @context
    .sub.header
      - if @context.is_a?(Manager) && @context.administrator?
        = translate_attribute(Manager, :administrator)
      - elsif @context.parent.present?
        = translate('cms.menu.context', resource: translate_model(@context.class), parent: @context.parent.label)
      - else
        = translate_model(@context.class)

- if %w[edit new].include?(action_name)
  .ui.divider
- else
  .ui.stackable.secondary.pointing.menu
    = menu_item translate('cms.menu.details'), @context, action: 'show' if allow.show?
    = menu_item translate_model(ManagedRecord, :plural), @context, index: 'managed_records' if allow.index_association?(:managed_records)
    = menu_item translate_model(Client, :plural), @context, index: 'clients' if allow.index_association?(:clients)
    = menu_item translate_model(Picture, :plural), @context, index: 'pictures' if allow.index_association?(:pictures)
    = menu_item translate_model(Country, :plural), @context, index: 'countries' if allow.index_association?(:countries)
    = menu_item translate_model(Region, :plural), @context, index: 'regions' if allow.index_association?(:regions)
    = menu_item translate_model(Area, :plural), @context, index: 'areas' if allow.index_association?(:areas)
    = menu_item translate_model(Event, :plural), @context, index: 'events' if allow.index_association?(:events)
    = menu_item translate_model(Registration, :plural), @context, index: 'registrations' if allow.index_association?(:registrations)
    = menu_item translate_model(Manager, :plural), @context, index: 'managers' if allow.index_association?(:managers)
    = menu_item translate_model(Audit, :plural), @context, index: 'audits' if allow.index_association?(:audits)
    = menu_item translate('cms.menu.activity'), @context, index: 'activity' if allow.try(:view_activity?)
    = menu_item translate('cms.menu.help'), @context, index: 'help' if allow.try(:help?)

.ui.basic.segment
  - flash.each do |key, message|
    .ui.message class=key
      = message

  = yield
