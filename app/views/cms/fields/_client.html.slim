
= f.input :enabled
= f.input :label

- unless f.object.new_record? && current_user.administrator?
  .ui.small.dividing.violet.header = translate('cms.forms.client.keys')
  .two.fields
    = f.input :secret_key, hint: translate('cms.hints.client.secret_key')
    = f.input :public_key, hint: translate('cms.hints.client.public_key')

.ui.small.dividing.violet.header = translate_attribute(f.object, :config)

table.ui.very.basic.table
  tr
    th.collapsing = f.label :location_type, translate_attribute(f.object, :location_type), required: false
    td.five.wide = f.input :location_type, label: false, collection: [Country, Region, Area].map { |k, v| [translate_model(k), k] }, input_html: { class: 'clearable' }, include_blank: 'Worldwide'
    td = f.hint translate('cms.hints.client.location_type')
  tr
    th.collapsing = f.label :location_id, translate_attribute(f.object, :location_id)
    td.five.wide = f.input :location_id, label: false
    td

  = f.simple_fields_for :config do |ff|
    - %i[domain locale embed_type routing_type default_view].each do |field|
      - is_enum = @model.respond_to?(field.to_s.pluralize)
      - collection = @model.send(field.to_s.pluralize).map { |k, v| [translate_enum_value(@model, field, k), k] } if is_enum
      tr
        th.collapsing
          = f.label field, translate_attribute(f.object, field), required: false
        td.five.wide
          - if is_enum
            = f.input field, label: false, collection: collection, selected: f.object.send(field), include_blank: false, input_html: { name: "client[config][#{field}]" }
          - else
            = f.input field, label: false, input_html: { name: "client[config][#{field}]", value: f.object.send(field) }, placeholder: translate(field, scope: 'cms.hints.client.placeholder', default: '')
        td = f.hint translate(field, scope: 'cms.hints.client')

= f.hint translate('cms.hints.client.advanced')

.ui.small.dividing.violet.header = translate('cms.hints.client.colors')
.three.fields
  = f.simple_fields_for :config do |ff|
    - %i[primary_color secondary_color tertiary_color].each do |field|
      = f.input field, input_html: { name: "client[config][#{field}]", value: f.object.send(field), style: "--color: #{f.object.send(field) || Client::DEFAULT_COLORS[field]}" }, placeholder: translate('cms.hints.client.placeholder.color')

- if policy(@record).set_manager?
  .ui.small.dividing.violet.header = translate('cms.forms.client.manager')

  - @record.manager = Manager.new unless @record.manager.present?
  = f.simple_fields_for :manager, include_id: false do |ff|
    .two.fields
      = ff.input :name, input_html: { value: @record.manager&.name }
      = ff.input :email, input_html: { value: @record.manager&.email }
