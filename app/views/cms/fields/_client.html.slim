
= f.input :enabled
= f.input :label
= f.input :client_type, collection: Client.client_types.map { |k, v| [translate_enum_value(Client, :client_type, k), k] }, hint: translate('cms.hints.manager.contact_method')

- unless f.object.new_record? && current_user.administrator?
  .ui.small.dividing.violet.header = translate('cms.forms.client.keys')
  .two.fields
    = f.input :secret_key, hint: translate('cms.hints.client.secret_key')
    = f.input :public_key, hint: translate('cms.hints.client.public_key')

.ui.small.dividing.violet.header = translate_attribute(f.object, :config)
= f.input :domain, hint: translate('cms.hints.client.domain')
= f.simple_fields_for :config do |ff|
  = ff.input :bounds, hint: translate('cms.hints.client.bounds'), required: false, input_html: { value: f.object.config['bounds'] }
  //= ff.input :location, label: translate_attribute(f.object, :location), required: false do
    = ff.hint translate('cms.hints.client.location')
    .two.fields
      - options = %i[country region city].map { |o| [o.to_s.humanize, o] }
      = ff.input :location_type, label: false, collection: options, selected: f.object.config['location_type'], prompt: "Choose Type"
      = ff.input :location_id, label: false, input_html: { value: f.object.config['location_id'] }

- if policy(@record).set_manager?
  .ui.small.dividing.violet.header = translate('cms.forms.client.manager')

  - @record.manager = Manager.new unless @record.manager.present?
  = f.simple_fields_for :manager, include_id: false do |ff|
    .two.fields
      = ff.input :name, input_html: { value: @record.manager&.name }
      = ff.input :email, input_html: { value: @record.manager&.email }
