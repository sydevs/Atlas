
= f.input :enabled
= f.input :label

- unless f.object.new_record? && current_user.administrator?
  = f.input :public_key, hint: translate('cms.hints.client.public_key')

.ui.small.dividing.violet.header = translate_attribute(f.object, :config)

.ui.small.icon.message
  i.cog.icon
  .content
    .header = translate('cms.hints.client.advanced.title')
    .description = translate('cms.hints.client.advanced.description')

.field
  = f.label :location_type, translate_attribute(f.object, :location_type), required: false
  .two.fields
    = f.input :location_type, label: false, collection: [Country, Region, Area].map { |k, v| [translate_model(k), k] }, input_html: { class: 'clearable' }, include_blank: 'Worldwide'
    = f.input :location_id, label: false
  = f.hint translate('cms.hints.client.location_type')

= f.simple_fields_for :config do |ff|
  - languages = I18nData.languages(I18n.locale).map { |k, v| [v.split(/[,;]/)[0], k] }
  = ff.input :locale, collection: languages, selected: f.object.locale, input_html: { class: 'search' }, hint: translate('cms.hints.client.locale'), include_blank: translate('cms.hints.country.no_default_language')

  = ff.input :domain, as: :text, label: translate_attribute(Client, :domain), hint: translate('cms.hints.client.domain'), input_html: { rows: 4, value: f.object.domain }
  = ff.input :canonical_url, label: translate_attribute(Client, :canonical_url), hint: translate('cms.hints.client.canonical_url'), input_html: { value: f.object.canonical_url }

.ui.small.dividing.violet.header = translate('cms.hints.client.colors')
.three.fields
  = f.simple_fields_for :config do |ff|
    - %i[primary_color secondary_color].each do |field|
      = f.input field, input_html: { name: "client[config][#{field}]", value: f.object.send(field), style: "--color: #{f.object.send(field) || Client::DEFAULT_COLORS[field]}" }, placeholder: translate('cms.hints.client.placeholder.color')

- if policy(@record).set_manager?
  .ui.small.dividing.violet.header = translate('cms.forms.client.manager')

  - @record.manager = Manager.new unless @record.manager.present?
  = f.simple_fields_for :manager, include_id: false do |ff|
    .two.fields
      = ff.input :name, input_html: { value: @record.manager&.name }
      = ff.input :email, input_html: { value: @record.manager&.email }
