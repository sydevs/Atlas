
- if @record.osm_id && @record.geojson && @record.bounds
  - languages = I18nData.languages(I18n.locale).map { |k, v| [v.split(/[,;]/)[0], k] }

  = f.input :geojson do
    #map data-geojson=@record.geojson.to_json data-bounds=@record.bounds_geojson.to_json

  = f.input :name
  = f.input :default_language_code, collection: languages, selected: @record.default_language_code, input_html: { class: 'search' }, hint: translate('cms.hints.country.language'), include_blank: translate('cms.hints.country.no_default_language')
  = f.input :enable_regions, as: :boolean, wrapper: :semantic_checkbox, hint: translate('cms.hints.country.enable_regions')
  = f.input :enable_custom_regions, as: :boolean, wrapper: :semantic_checkbox, hint: translate('cms.hints.country.enable_custom_regions')

  .ui.accordion
    .ui.title
      i.dropdown.icon
      = translate_attribute(@record, :geo_data)
    .content
      - strings = %i[osm_id bounds]
      - textareas = %i[geojson translations]
      - (strings + textareas).each do |field|
        - data = @record.send(field)
        = f.input field do
          .ui.code.input
            = f.input_field field, as: (textareas.include?(field) ? :text : :string), placeholder: translate('cms.hints.not_set'), id: "js-map-#{field}", value: data&.to_json
- else
  .field id='js-osm-search' data-type='country'
    .ui.search
      .ui.left.icon.action.input
        i.search.icon
        input.prompt type='text' name='query' placeholder=translate('cms.hints.geosearch.prompt')
        button.ui.submit.button = translate('cms.actions.simple.search')

    table.ui.very.basic.table
