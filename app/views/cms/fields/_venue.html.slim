
= f.input :published

= f.input :name, placeholder: f.object.street

.required.field
  = f.label :address
  .fields
    .eleven.wide.field
      = f.input_field :street, placeholder: translate_attribute(Venue, :street)
    .five.wide.field
      = f.input_field :city, placeholder: translate_attribute(Venue, :city)
  .fields
    .six.wide.field
      - if f.object.province_code.present?
        = f.hidden_field :province_code
        = f.input_field :province, value: f.object.province.name, disabled: true
      - elsif f.object.country_code.present?
        = f.input_field :province_code, collection: ISO3166::Country[f.object.country_code].subdivisions.map { |k,v| [v['name'], k] }, prompt: translate('cms.hints.province.prompt'), class: 'search'
    .seven.wide.field
      - if f.object.country_code.present?
        = f.hidden_field :country_code
        = f.input_field :country, as: :string, value: f.object.country.label, disabled: true
      - else
        = f.input_field :country_code, collection: ISO3166::Country.translations.map { |k,v| [v, k] }, prompt: translate_attribute(Venue, :country), class: 'search'
    .three.wide.field
      = f.input_field :postcode, placeholder: translate_attribute(Venue, :postcode)

  = f.hidden_field :latitude
  = f.hidden_field :longitude

button.lookup.ui.fluid.button type='button'
  i.search.icon
  = translate('cms.hints.venue.find_marker')

#venue-map data-editable='true'
.ui.map.message class="#{'hidden' if f.object.coordinates?}"
  .header = translate('cms.hints.venue.marker_not_set.title')
  p = translate('cms.hints.venue.marker_not_set.description')
.ui.negative.map.message.for-failure class='hidden'
  .header = translate('cms.hints.venue.cant_find_address.title')
  p = translate('cms.hints.venue.cant_find_address.description')
.ui.info.map.message.for-success class="#{'hidden' unless f.object.coordinates?}"
  .header = translate('cms.hints.venue.marker_set.title')
  p = translate('cms.hints.venue.marker_set.description')
