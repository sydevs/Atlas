
- categories = Event.categories.map { |k, v| [translate_enum_value(Event, :category, k), k] }
- languages = I18nData.languages(I18n.locale).map { |k, v| [v.split(/[,;]/)[0], k] }

= f.input :published

= f.input :venue do
  .hint = [@record.venue.name, @record.venue.address].compact.join(', ')

.ui.small.dividing.violet.header = translate('cms.forms.event.details')

= f.input :category, collection: categories

= f.input :description do 
  .hint = translate('cms.hints.event.description', min: 40, max: 600)
  = f.input_field :description, as: :text, placeholder: @record.category_description do 
  .hint
    span.js-character-count data={ for: 'event_description', min: 40, max: 600 } = @record.description&.length || 0
    = translate('cms.hints.event.description_count', min: 40, max: 600)

.two.fields
  = f.input :room, hint: translate('cms.hints.event.room')
  = f.input :language_code, collection: languages, selected: @record.language_code || I18n.locale.upcase, input_html: { class: 'search' }, hint: translate('cms.hints.event.language')

= f.input :custom_name, placeholder: @record.category_name, hint: translate('cms.hints.event.custom_name')

.ui.small.dividing.violet.header = translate('cms.forms.event.online')

= f.input :online, hint: translate('cms.hints.event.online')
= f.input :online_url, hint: translate('cms.hints.event.online_url')

.ui.small.dividing.violet.header = translate('cms.forms.event.timing')

= f.input :recurrence, collection: Event.recurrences.map { |k, v| [translate_enum_value(Event, :recurrence, k), k] }

.two.fields
  = f.input :start_date, as: :string, wrapper: :semantic_date, wrapper_html: { class: 'start' }
  = f.input :end_date, as: :string, wrapper: :semantic_date, wrapper_html: { class: 'end' }, input_html: { placeholder: translate('cms.hints.never') }

.two.fields
  = f.input :start_time, wrapper_html: { class: 'start' }, input_html: { type: 'time', autocomplete: 'off' }
  = f.input :end_time, wrapper_html: { class: 'end' }, input_html: { type: 'time', autocomplete: 'off', placeholder: translate('cms.hints.unspecified') }

.ui.small.dividing.violet.header = translate('cms.forms.event.registration')

.hint = translate('cms.hints.event.registration_mode', native: translate_enum_value(@record, :registration_mode, :native))
.hint = translate('cms.hints.event.registration_url', native: translate_enum_value(@record, :registration_mode, :native))
.fields
  = f.input :registration_mode, collection: Event.registration_modes.map { |k, v| [translate_enum_value(Event, :registration_mode, k), k] }, wrapper_html: { class: 'four wide' }
  = f.input :registration_url, as: :url, placeholder: map_event_url(@record&.id || 0, anchor: 'register'), wrapper_html: { class: 'twelve wide' }
= help_link :registration

= f.input :disable_notifications, hint: translate('cms.hints.event.disable_notifications')

- if policy(@record).set_manager?
  .ui.small.dividing.violet.header = translate('cms.forms.event.manager')

  - @record.manager = Manager.new unless @record.manager.present?
  = f.simple_fields_for :manager, include_id: false do |ff|
    .ui.hint = translate('cms.hints.event.manager')

    .two.fields
      = ff.input :name, input_html: { value: @record.manager&.name }
      = ff.input :email, input_html: { value: @record.manager&.email }

.ui.hidden.section.divider